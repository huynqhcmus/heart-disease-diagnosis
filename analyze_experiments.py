#!/usr/bin/env python3
"""
Script ph√¢n t√≠ch k·∫øt qu·∫£ th√≠ nghi·ªám
- So s√°nh k·∫øt qu·∫£ gi·ªØa c√°c l·∫ßn ch·∫°y
- T·∫°o b√°o c√°o t·ªïng h·ª£p
- Visualize k·∫øt qu·∫£
"""

import os
import json
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from datetime import datetime
import numpy as np

def load_experiment_results(experiment_dir: str):
    """Load k·∫øt qu·∫£ t·ª´ th√≠ nghi·ªám"""
    metadata_file = os.path.join(experiment_dir, "metadata.json")
    
    if not os.path.exists(metadata_file):
        print(f"‚ùå Kh√¥ng t√¨m th·∫•y metadata.json trong {experiment_dir}")
        return None
        
    with open(metadata_file, 'r', encoding='utf-8') as f:
        return json.load(f)

def create_results_dataframe(experiments_data):
    """T·∫°o DataFrame t·ª´ k·∫øt qu·∫£ th√≠ nghi·ªám"""
    results = []
    
    for exp_name, exp_data in experiments_data.items():
        if "results" in exp_data:
            for model_name, result in exp_data["results"].items():
                row = {
                    "experiment": exp_name,
                    "model": model_name,
                    "timestamp": result.get("timestamp", ""),
                    "train_time": result.get("train_time", 0)
                }
                
                # Th√™m metrics
                if "metrics" in result:
                    row.update(result["metrics"])
                    
                results.append(row)
    
    return pd.DataFrame(results)

def plot_model_comparison(df):
    """V·∫Ω bi·ªÉu ƒë·ªì so s√°nh models"""
    if df.empty:
        print("‚ùå Kh√¥ng c√≥ d·ªØ li·ªáu ƒë·ªÉ v·∫Ω bi·ªÉu ƒë·ªì")
        return
        
    # T·∫°o subplots
    fig, axes = plt.subplots(2, 2, figsize=(15, 12))
    fig.suptitle('Model Performance Comparison', fontsize=16)
    
    # Accuracy comparison
    if 'accuracy' in df.columns:
        sns.barplot(data=df, x='model', y='accuracy', ax=axes[0,0])
        axes[0,0].set_title('Accuracy Comparison')
        axes[0,0].tick_params(axis='x', rotation=45)
    
    # F1 Score comparison
    if 'f1' in df.columns:
        sns.barplot(data=df, x='model', y='f1', ax=axes[0,1])
        axes[0,1].set_title('F1 Score Comparison')
        axes[0,1].tick_params(axis='x', rotation=45)
    
    # ROC AUC comparison
    if 'roc_auc' in df.columns:
        sns.barplot(data=df, x='model', y='roc_auc', ax=axes[1,0])
        axes[1,0].set_title('ROC AUC Comparison')
        axes[1,0].tick_params(axis='x', rotation=45)
    
    # Training time comparison
    if 'train_time' in df.columns:
        sns.barplot(data=df, x='model', y='train_time', ax=axes[1,1])
        axes[1,1].set_title('Training Time Comparison')
        axes[1,1].tick_params(axis='x', rotation=45)
    
    plt.tight_layout()
    plt.savefig('experiment_results_comparison.png', dpi=300, bbox_inches='tight')
    plt.show()

def generate_summary_report(df):
    """T·∫°o b√°o c√°o t·ªïng h·ª£p"""
    if df.empty:
        return "‚ùå Kh√¥ng c√≥ d·ªØ li·ªáu ƒë·ªÉ t·∫°o b√°o c√°o"
    
    report = []
    report.append("üìä B√ÅO C√ÅO T·ªîNG H·ª¢P TH√ç NGHI·ªÜM")
    report.append("=" * 50)
    
    # Th·ªëng k√™ t·ªïng quan
    report.append(f"\nüìà T·ªïng s·ªë th√≠ nghi·ªám: {df['experiment'].nunique()}")
    report.append(f"ü§ñ T·ªïng s·ªë models: {df['model'].nunique()}")
    
    # Model t·ªët nh·∫•t theo t·ª´ng metric
    metrics = ['accuracy', 'f1', 'roc_auc']
    for metric in metrics:
        if metric in df.columns:
            best_idx = df[metric].idxmax()
            best_model = df.loc[best_idx, 'model']
            best_score = df.loc[best_idx, metric]
            report.append(f"\nüèÜ {metric.upper()} t·ªët nh·∫•t: {best_model} ({best_score:.4f})")
    
    # Th·ªëng k√™ training time
    if 'train_time' in df.columns:
        avg_time = df['train_time'].mean()
        total_time = df['train_time'].sum()
        report.append(f"\n‚è±Ô∏è  Th·ªùi gian training trung b√¨nh: {avg_time:.2f}s")
        report.append(f"‚è±Ô∏è  T·ªïng th·ªùi gian training: {total_time:.2f}s")
    
    # Top 5 models theo accuracy
    if 'accuracy' in df.columns:
        top_models = df.nlargest(5, 'accuracy')[['model', 'accuracy']]
        report.append(f"\nü•á TOP 5 MODELS THEO ACCURACY:")
        for idx, row in top_models.iterrows():
            report.append(f"   {row['model']}: {row['accuracy']:.4f}")
    
    return "\n".join(report)

def main():
    """Main function"""
    print("üîç Ph√¢n t√≠ch k·∫øt qu·∫£ th√≠ nghi·ªám...")
    
    # T√¨m t·∫•t c·∫£ th√≠ nghi·ªám
    experiments_dir = "experiments"
    if not os.path.exists(experiments_dir):
        print(f"‚ùå Kh√¥ng t√¨m th·∫•y th∆∞ m·ª•c {experiments_dir}")
        return
    
    experiments_data = {}
    experiment_dirs = [d for d in os.listdir(experiments_dir) 
                      if os.path.isdir(os.path.join(experiments_dir, d))]
    
    if not experiment_dirs:
        print("‚ùå Kh√¥ng t√¨m th·∫•y th√≠ nghi·ªám n√†o")
        return
    
    # Load k·∫øt qu·∫£ t·ª´ t·∫•t c·∫£ th√≠ nghi·ªám
    for exp_dir in experiment_dirs:
        exp_path = os.path.join(experiments_dir, exp_dir)
        exp_data = load_experiment_results(exp_path)
        if exp_data:
            experiments_data[exp_dir] = exp_data
    
    if not experiments_data:
        print("‚ùå Kh√¥ng load ƒë∆∞·ª£c d·ªØ li·ªáu th√≠ nghi·ªám n√†o")
        return
    
    # T·∫°o DataFrame
    df = create_results_dataframe(experiments_data)
    
    if df.empty:
        print("‚ùå Kh√¥ng c√≥ k·∫øt qu·∫£ ƒë·ªÉ ph√¢n t√≠ch")
        return
    
    print(f"‚úÖ ƒê√£ load {len(df)} k·∫øt qu·∫£ t·ª´ {len(experiments_data)} th√≠ nghi·ªám")
    
    # T·∫°o b√°o c√°o
    report = generate_summary_report(df)
    print("\n" + report)
    
    # L∆∞u b√°o c√°o
    with open("./docs/experiment_analysis_report.txt", "w", encoding="utf-8") as f:
        f.write(report)
    
    # V·∫Ω bi·ªÉu ƒë·ªì
    try:
        plot_model_comparison(df)
        print("\nüìä ƒê√£ t·∫°o bi·ªÉu ƒë·ªì so s√°nh: experiment_results_comparison.png")
    except Exception as e:
        print(f"‚ö†Ô∏è  Kh√¥ng th·ªÉ t·∫°o bi·ªÉu ƒë·ªì: {e}")
    
    # L∆∞u DataFrame
    df.to_csv("./docs/experiment_results.csv", index=False)
    print("üíæ ƒê√£ l∆∞u k·∫øt qu·∫£ chi ti·∫øt: experiment_results.csv")
    
    print("\nüéâ Ho√†n th√†nh ph√¢n t√≠ch th√≠ nghi·ªám!")

if __name__ == "__main__":
    main()
